buildscript {
    dependencies {
        classpath 'com.palantir.javaformat:gradle-palantir-java-format:2.49.0'
    }
}

plugins {
    id 'com.netflix.nebula.netflixoss' version '11.4.0'
    id "com.google.osdetector" version '1.7.3'
    id 'me.champeau.jmh' version '0.7.2'
    id 'org.openrewrite.rewrite' version '6.28.2'
    id 'net.ltgt.errorprone' version '4.1.0'
}

ext.githubProjectName = rootProject.name


idea {
    project {
        languageLevel = '17'
    }
}

configurations.all {
    exclude group: 'asm', module: 'asm'
    exclude group: 'asm', module: 'asm-all'
}

allprojects {
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'com.netflix.nebula.netflixoss'
    apply plugin: 'java'
    apply plugin: 'com.netflix.nebula.javadoc-jar'
    apply plugin: 'com.netflix.nebula.dependency-lock'
    apply plugin: 'me.champeau.jmh'
    apply plugin: 'org.openrewrite.rewrite'
    apply plugin: 'com.palantir.java-format'
    apply plugin: 'net.ltgt.errorprone'

    license {
        ignoreFailures = false
        excludes([
                "**/META-INF/services/javax.annotation.processing.Processor",
                "**/META-INF/gradle/incremental.annotation.processors",
                "**/*.cert",
                "**/*.jks",
                "**/*.key",
        ])
    }

    group = "com.netflix.${githubProjectName}"

    sourceCompatibility = '17'
    targetCompatibility = '17'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    tasks.withType(JavaCompile).configureEach {
        dependencies {
            errorprone "com.uber.nullaway:nullaway:0.12.1"
            errorprone "com.google.errorprone:error_prone_core:2.35.1"
        }

        options.errorprone {
            check("NullAway", net.ltgt.gradle.errorprone.CheckSeverity.WARN)
            option("NullAway:AnnotatedPackages", "com.netflix.zuul")
            check("DeduplicateConstants", net.ltgt.gradle.errorprone.CheckSeverity.WARN)
            errorproneArgs.addAll(
//                Uncomment to automatically apply fixes for a check.
//                N.B: disables all other checks while enabled.
//                "-XepPatchChecks:UnnecessaryParentheses",
//                "-XepPatchLocation:IN_PLACE",
                "-Xep:AutoFactoryAtInject",
                "-Xep:BanClassLoader",
                "-Xep:BanSerializableRead",
                "-Xep:ClassName",
                "-Xep:ComparisonContractViolated",
                "-Xep:DepAnn",
                "-Xep:EmptyIf",
                "-Xep:ExtendsAutoValue",
                "-Xep:InjectMoreThanOneQualifier",
                "-Xep:InsecureCryptoUsage",
                "-Xep:IterablePathParameter",
                "-Xep:LongLiteralLowerCaseSuffix",
                "-Xep:MissingRuntimeRetention",
                "-Xep:NoAllocation",
                "-Xep:RefersToDaggerCodegen",
                "-Xep:StaticOrDefaultInterfaceMethod",
                "-Xep:StaticQualifiedUsingExpression",
                "-Xep:SystemExitOutsideMain",
                "-Xep:UseCorrectAssertInTests",
                "-Xep:AnnotationPosition",
                "-Xep:AssertFalse",
                "-Xep:AssistedInjectAndInjectOnConstructors",
                "-Xep:AvoidObjectArrays",
                "-Xep:BinderIdentityRestoredDangerously",
                "-Xep:BindingToUnqualifiedCommonType",
                "-Xep:BuilderReturnThis",
                "-Xep:CanIgnoreReturnValueSuggester",
                "-Xep:CannotMockFinalClass",
                "-Xep:CannotMockMethod",
                "-Xep:CatchingUnchecked",
                "-Xep:CheckedExceptionNotThrown",
                "-Xep:ConstantPatternCompile",
                "-Xep:DefaultLocale",
                "-Xep:DifferentNameButSame",
                "-Xep:EqualsBrokenForNull",
                "-Xep:ExpectedExceptionChecker",
                "-Xep:FloggerLogWithCause",
                "-Xep:FloggerMessageFormat",
                "-Xep:FloggerRedundantIsEnabled",
                "-Xep:FloggerRequiredModifiers",
                "-Xep:FloggerWithCause",
                "-Xep:FloggerWithoutCause",
                "-Xep:FunctionalInterfaceClash",
                "-Xep:HardCodedSdCardPath",
                "-Xep:IdentifierName",
                "-Xep:InconsistentOverloads",
                "-Xep:InitializeInline",
                "-Xep:InterfaceWithOnlyStatics",
                "-Xep:InterruptedExceptionSwallowed",
                "-Xep:Interruption",
                "-Xep:MissingDefault",
                "-Xep:MockitoDoSetup",
                "-Xep:MutableGuiceModule",
                "-Xep:NonCanonicalStaticMemberImport",
                "-Xep:NonFinalStaticField",
                "-Xep:PreferJavaTimeOverload",
                "-Xep:PreferredInterfaceType",
                "-Xep:PrimitiveArrayPassedToVarargsMethod",
                "-Xep:QualifierWithTypeUse",
                "-Xep:RedundantOverride",
                "-Xep:RedundantThrows",
                "-Xep:StringFormatWithLiteral",
                "-Xep:StronglyTypeByteString",
                "-Xep:StronglyTypeTime",
                "-Xep:SunApi",
                "-Xep:SuppressWarningsWithoutExplanation",
                "-Xep:SystemOut",
                "-Xep:TestExceptionChecker",
                "-Xep:ThrowSpecificExceptions",
                "-Xep:TimeUnitMismatch",
                "-Xep:TooManyParameters",
                "-Xep:TransientMisuse",
                "-Xep:TruthContainsExactlyElementsInUsage",
                "-Xep:TryWithResourcesVariable",
                "-Xep:UnescapedEntity",
                "-Xep:UnnecessarilyFullyQualified",
                "-Xep:UnnecessarilyUsedValue",
                "-Xep:UnnecessarilyVisible",
                "-Xep:UnnecessaryAnonymousClass",
                "-Xep:UnnecessaryDefaultInEnumSwitch",
                "-Xep:UnnecessaryFinal",
                "-Xep:UnnecessaryOptionalGet",
                "-Xep:UnnecessaryTestMethodPrefix",
                "-Xep:UnsafeLocaleUsage",
                "-Xep:UnusedException",
                "-Xep:UrlInSee",
                "-Xep:UsingJsr305CheckReturnValue",
                "-Xep:Var",
                "-Xep:Varifier",
                "-Xep:YodaCondition",
                "-Xep:AnnotationMirrorToString",
                "-Xep:AnnotationValueToString",
                "-Xep:BooleanParameter",
                "-Xep:ClassNamedLikeTypeParameter",
                "-Xep:ConstantField",
                "-Xep:EqualsMissingNullable",
                "-Xep:FieldCanBeFinal",
                "-Xep:FieldCanBeLocal",
                "-Xep:FieldCanBeStatic",
                "-Xep:FieldMissingNullable",
                "-Xep:ForEachIterable",
                "-Xep:ImmutableMemberCollection",
                "-Xep:ImmutableRefactoring",
                "-Xep:ImmutableSetForContains",
                "-Xep:ImplementAssertionWithChaining",
                "-Xep:LambdaFunctionalInterface",
                "-Xep:MethodCanBeStatic",
                "-Xep:MissingBraces",
                "-Xep:MixedArrayDimensions",
                "-Xep:MultiVariableDeclaration",
                "-Xep:MultipleTopLevelClasses",
                "-Xep:PackageLocation",
                "-Xep:ParameterComment",
                "-Xep:ParameterMissingNullable",
                "-Xep:PrivateConstructorForNoninstantiableModule",
                "-Xep:PrivateConstructorForUtilityClass",
                "-Xep:PublicApiNamedStreamShouldReturnStream",
                "-Xep:RemoveUnusedImports",
                "-Xep:ReturnMissingNullable",
                "-Xep:ReturnsNullCollection",
                "-Xep:ScopeOnModule",
                "-Xep:SwitchDefault",
                "-Xep:SymbolToString",
                "-Xep:ThrowsUncheckedException",
                "-Xep:TryFailRefactoring",
                "-Xep:TypeParameterNaming",
                "-Xep:TypeToString",
                "-Xep:UngroupedOverloads",
                "-Xep:UnnecessaryBoxedAssignment",
                "-Xep:UnnecessaryBoxedVariable",
                "-Xep:UnnecessarySetDefault",
                "-Xep:UnnecessaryStaticImport",
                "-Xep:UseEnumSwitch",
                "-Xep:VoidMissingNullable",
                "-Xep:WildcardImport",
            )
        }
    }

    eclipse {
        classpath {
            downloadSources = true
            downloadJavadoc = true
        }
    }

    tasks.withType(Javadoc).each {
        it.classpath = sourceSets.main.compileClasspath
        // Ignore Javadoc warnings for now, re-enable after Zuul 3.
        it.options.addStringOption('Xdoclint:none', '-quiet')
    }

    ext {
        libraries = [
                guava: "com.google.guava:guava:33.3.0-jre",
                okhttp: 'com.squareup.okhttp3:okhttp:4.12.0',
                jupiterApi: 'org.junit.jupiter:junit-jupiter-api:5.+',
                jupiterParams: 'org.junit.jupiter:junit-jupiter-params:5.+',
                jupiterEngine: 'org.junit.jupiter:junit-jupiter-engine:5.+',
                jupiterMockito: 'org.mockito:mockito-junit-jupiter:5.+',
                mockito: 'org.mockito:mockito-core:5.+',
                slf4j: "org.slf4j:slf4j-api:1.7.36",
                truth: 'com.google.truth:truth:1.1.5',
                awaitility: 'org.awaitility:awaitility:4.2.0'
        ]
    }

    tasks.withType(Test).configureEach {
        jvmArgs += [
                "-Xcheck:jni"
        ]
    }

    test {
        useJUnitPlatform()
        testLogging {
            showStandardStreams = true
        }
    }
}

dependencies {
    rewrite(platform("org.openrewrite.recipe:rewrite-recipe-bom:2.22.0"))
    rewrite("org.openrewrite.recipe:rewrite-logging-frameworks")
    rewrite("org.openrewrite.recipe:rewrite-testing-frameworks")
    rewrite("org.openrewrite.recipe:rewrite-static-analysis")
}

rewrite {
    failOnDryRunResults = true
    activeRecipe("org.openrewrite.java.testing.junit5.JUnit5BestPractices")
    activeRecipe("org.openrewrite.java.logging.slf4j.Slf4jBestPractices")

    exclusion(
            // Exclude all groovy files
            "**/*.groovy")
}
