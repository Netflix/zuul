buildscript {
    dependencies {
        classpath 'com.palantir.javaformat:gradle-palantir-java-format:2.36.0'
    }
}

plugins {
    id 'com.netflix.nebula.netflixoss' version '11.4.0'
    id "com.google.osdetector" version '1.7.3'
    id 'me.champeau.jmh' version '0.7.2'
    id 'org.openrewrite.rewrite' version '6.8.1'
}

ext.githubProjectName = rootProject.name


idea {
    project {
        languageLevel = '17'
    }
}

configurations.all {
    exclude group: 'asm', module: 'asm'
    exclude group: 'asm', module: 'asm-all'
}

allprojects {
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'com.netflix.nebula.netflixoss'
    apply plugin: 'java'
    apply plugin: 'com.netflix.nebula.javadoc-jar'
    apply plugin: 'com.netflix.nebula.dependency-lock'
    apply plugin: 'me.champeau.jmh'
    apply plugin: 'org.openrewrite.rewrite'
    apply plugin: 'com.palantir.java-format'

    license {
        ignoreFailures = false
        excludes([
                "**/META-INF/services/javax.annotation.processing.Processor",
                "**/META-INF/gradle/incremental.annotation.processors",
                "**/*.cert",
                "**/*.jks",
                "**/*.key",
        ])
    }

    group = "com.netflix.${githubProjectName}"

    sourceCompatibility = '17'
    targetCompatibility = '17'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    eclipse {
        classpath {
            downloadSources = true
            downloadJavadoc = true
        }
    }

    tasks.withType(Javadoc).each {
        it.classpath = sourceSets.main.compileClasspath
        // Ignore Javadoc warnings for now, re-enable after Zuul 3.
        it.options.addStringOption('Xdoclint:none', '-quiet')
    }

    ext {
        libraries = [
                guava: "com.google.guava:guava:31.1-jre",
                okhttp: 'com.squareup.okhttp3:okhttp:4.12.0',
                jupiterApi: 'org.junit.jupiter:junit-jupiter-api:5.+',
                jupiterParams: 'org.junit.jupiter:junit-jupiter-params:5.+',
                jupiterEngine: 'org.junit.jupiter:junit-jupiter-engine:5.+',
                jupiterMockito: 'org.mockito:mockito-junit-jupiter:5.+',
                mockito: 'org.mockito:mockito-core:5.+',
                slf4j: "org.slf4j:slf4j-api:1.7.36",
                truth: 'com.google.truth:truth:1.1.5',
                awaitility: 'org.awaitility:awaitility:4.2.0'
        ]
    }

    tasks.withType(Test).configureEach {
        jvmArgs += [
                "-Xcheck:jni"
        ]
    }

    // This adds HARNESS_JAVA_AGENT to the testing command if it's
    // provided through the command line.
    // Local builds will still remain same as it only adds if the
    // parameter is provided.
    tasks.withType(Test) {
      if(System.getProperty("HARNESS_JAVA_AGENT")) {
        jvmArgs += [System.getProperty("HARNESS_JAVA_AGENT")]
      }
    }

    // This makes sure that any test tasks for subprojects don't
    // fail in case the test filter does not match.
    gradle.projectsEvaluated {
            tasks.withType(Test) {
                filter {
                    setFailOnNoMatchingTests(false)
                }
            }
    }

    test {
        useJUnitPlatform()
        testLogging {
            showStandardStreams = true
        }
    }
}

dependencies {
    rewrite(platform("org.openrewrite.recipe:rewrite-recipe-bom:2.6.3"))
    rewrite("org.openrewrite.recipe:rewrite-logging-frameworks")
    rewrite("org.openrewrite.recipe:rewrite-testing-frameworks")
    rewrite("org.openrewrite.recipe:rewrite-static-analysis")
}

rewrite {
    failOnDryRunResults = true
    activeRecipe("org.openrewrite.java.testing.junit5.JUnit5BestPractices")
    activeRecipe("org.openrewrite.java.logging.slf4j.Slf4jBestPractices")

    exclusion(
            // Exclude all groovy files
            "**/*.groovy")
}
