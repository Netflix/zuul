apply plugin: 'groovy'
apply plugin: 'war'
apply plugin: 'jetty'

configurations {
    all*.exclude group: 'asm', module: 'asm'
    all*.exclude group: 'asm', module: 'asm-all'

    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {

    compile project(':zuul-core')
    compile project(':zuul-servletapi')

    compile "com.netflix.karyon:karyon-core:${versions_karyon}"
    compile "com.netflix.karyon:karyon-admin:${versions_karyon}"
    compile "com.netflix.karyon:karyon-admin-web:${versions_karyon}"
    compile "com.netflix.karyon:karyon-extensions:${versions_karyon}"
    compile "com.netflix.blitz4j:blitz4j:1.35"
    compile "com.sun.jersey:jersey-core:${versions_jersey}"
    compile "com.sun.jersey:jersey-server:${versions_jersey}"
    compile "com.sun.jersey:jersey-client:${versions_jersey}"
    compile "com.sun.jersey:jersey-servlet:${versions_jersey}"

    runtime 'org.ow2.asm:asm:5.0.3'
    runtime 'org.ow2.asm:asm-all:5.0.3'
    runtime 'org.apache.xbean:xbean-bundleutils:3.17'
    runtime 'org.apache.xbean:xbean-finder:3.17'

    compile "org.codehaus.groovy:groovy-all:${versions_groovy}"
    providedCompile 'junit:junit-dep:4.10'

    testCompile("org.spockframework:spock-core:1.0-groovy-2.3")
    testCompile("org.codehaus.groovy.modules.http-builder:http-builder:0.7+")
    //testCompile("org.eclipse.jetty.aggregate:jetty-all:9.3.+")
    //testCompile("org.eclipse.jetty.aggregate:jetty-all-server:7.+")
}

sourceSets {
    test {
        java {
            srcDirs  = ['src/main/java']
            include '**/*.java'
        }
        groovy {
            srcDirs  = ['src/main/groovy']
            include '**/*.groovy'
        }
    }

    integrationTest {
        groovy {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/groovy')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

war {
    webXml = file('src/main/webapp/WEB-INF/web.xml')
    webInf{
        from('src/main/groovy/filters') {
            into('classes')
        }
    }
}

jettyRun.contextPath = '/'
jettyRun.httpPort = 8099
jettyRun.daemon = true
jettyStop.stopPort = 8091
jettyStop.stopKey = 'stopKey'

jettyRun.doFirst {
    System.setProperty("archaius.deployment.applicationId", "zuul")
    System.setProperty("archaius.deployment.stack", "local")

    String filtersRoot = new File(projectDir, "src/main/groovy/filters").getAbsolutePath()
    System.setProperty("zuul.filters.root", filtersRoot)


    // NOTE: Must not have our own groovy
    // on the class path since it's already loaded by gradle
    // and if it isn't exactly the same version, then we get
    // "GroovyRuntimeException: Conflicting module versions"
    final FileCollection currentClasspath = classpath
    final FileCollection classpathWithoutGroovy = currentClasspath.filter {
        File f -> !f.name.contains('groovy-all')
    }
    classpath = classpathWithoutGroovy
}

task integrationTest(type: Test, dependsOn: 'jettyRun') {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath

    System.setProperty("integrationtest.port", "8099")

    testLogging.showStandardStreams = true

    //If you want to ensure that integration tests are run every time when you invoke
    //this task, uncomment the following line.
    outputs.upToDateWhen { false }
}
integrationTest.finalizedBy 'jettyStop'

// Don't normally run integrationTest task.
check.dependsOn -= integrationTest

//Ensure that the HTML reports of unit and integration tests are written to different directories.
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}
